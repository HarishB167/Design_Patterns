Creational Patterns

--------------------------------------
Section 1 - Prototype Pattern

- Create new object by copying existing objects.
Copy shapes in ppt.

- Structure
* Component (Interface) (Prototype)
render()
clone()
* Circle (ConcretePrototype)
render()
clone()
* ContextMenu (Client)
duplicate() : component.clone()

- Relationship
* Inheritance(Circle, Component)
* Depend(ContextMenu, Component)

- Using
menu = ContextMenu()
menu.duplicate(circle)
doc.add(newCircle)

--------------------------------------
Section 2 - Singleton Pattern

- Ensure single instance of a class. 
E.g. - storing config at one place

- Structure
* ConfigManager (Singleton)
private constructor ConfigManager()
static members: 
private instance = new ConfigManager(), 
getInstance() : returns instance
Instance methods : get(), set()

- Using
logger1 = Logger.get_instance("file1")

--------------------------------------
Section 3 - Factory Method Patterns

- Defer the creation of an object to subclasses.
Using different and custom viewEngine in a web framework.
Using inheritance and polymorphism.

- Structure
* Controller (Creator)
render() : Using createViewEngine's engine. 
(operation : var product = factoryMethod())
createViewEngine() : returns default engine. (factoryMethod)
* SharpController (ConcreteCreator)
createViewEngine() : returns sharp's viewEngine
(factoryMethod() : return new ConcreteProduct())

- Relationship
* Inheritance(SharpController, Controller)

- Using
ProductsController extends SharpController
ProductsController().listProducts() : Uses render, 
Then in Controller class :
render() uses createViewEngine, and
then engine.render(..)

--------------------------------------
Section 4 - Abstract Factory Patterns

- Provides an interface for creating
families of related objects.
Changing theme of widgets

- Structure
* WidgetFactory (interface) (AbstractFactory)
createTextBox()
createButton()
* MaterialWidgetFactory (ConcreteFactory1)
createTextBox : return MaterialTextBox
* AntWidgetFactory (ConcreteFactory2)
createTextBox : return AntTextBox

- Relationship
* Inheritance(MaterialFactory, WidgetFactory)

- Using
ContactForm().render(AntWidgetFactory()) : 
Uses factory.createTextBox()

--------------------------------------
Section 5 - Builder Patterns

- To separate construction of an object
to its representation.
Exporting slide (construction)
in pdf, movie etc (representations).

- Structure
* PresentationBuilder (interface) (Builder)
addSlide() (buildPart)
* PdfDocumentBuilder (ConcreteBuilder)
addSlide() (buildPart) : pdfDoc.addPage()
getPdfDocument() (getResult)
* MovieBuilder (ConcreteBuilder)
addSlide() : movie.addFrame()
getMovie()
* Presentation (Director)
export() (construct) : 
for every slide : builder.addSlide(slide)

- Relationship
* Inheritance(PdfDocumentBuilder, PresentationBuilder)
* Depend(Presentation, PresentationBuilder)

- Using
presentation = Presentation()
presentation.add_slide(Slide("Slide 1"))
presentation.add_slide(Slide("Slide 2"))

builder = MovieBuilder()
presentation.export(builder)
movie = builder.get_movie()

--------------------------------------
Status - Section 5 


