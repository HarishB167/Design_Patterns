
- What are Design Patterns
* Elegant solution to repeating problems

- Categories
* Creational, Structural, Behavioural
* Creational : Different ways to create objects
* Structural : Relationships b/w these objects
* Behavioural : Interaction/Communication b/w objects (Here in first part)

--------------------------------------
Section 2 : Essentials

- Coupling
* Dependency on another class
* Consumer class also recompiled on change.

- Interfaces
* Contract - class capabilities
* Prevents recompilation of dependent classes.
* public interface MyInteface { float calculateTax();}
* public class MyClass implements MyInterface {}
* Using dependency injection framework.

- Encapsulation
* Restrict state/data changes externally directly.
* Provide getters/setters.

- Abstraction
* Hide unecessary details
* Using private for non-consumer methods.

- Inheritance
* Extends keyword

- Polymorphism
* Object's ability to morph
* Using abstract method and class

- UML
* Unified Modeling Lang
* -/+ = private/public
* Method <-/+> <name>([args,..])[:<returnType>]
* Field <-/+> <name>:type
* Relationship
Inheritance (filled triangle arrow) (arrow points to super class),
Composition (Arrow at one side (size) and diamond at other(shape))
shape is composed of size, 
Dependency (parameter/local var) (dashed arrow pointing to used class)

--------------------------------------
Section 3 : Memento Pattern

- Undo Mechanism implement

- Structure
* Editor (Originator)
createState
restore(state)
* EditorState (Memento)
* History (Caretaker)
List of EditorState
push(state), pop
* Relationship
Depend(Editor, EditorState)
Compose(History, EditorState)

--------------------------------------
Section 4 : State Pattern

- Tool based canvas state

- Structure
* Canvas (Context)
currentTool
mouseUp() : action() (request)
* Tool (Abstract) (State)
mouseUp() : action() (handle)
* Tool1, Tool2 (ConcreteStateA,B)
mouseUp() : action() (handle)
* Relationship
Compose(Canvas, Tool)
Inheritance(Tool1, Tool)

- Open Closed Principle
* open for extension and closed for modification

- Makes Extensible

- Doing different things based on state

--------------------------------------
Section 5 : Iterator Pattern

- Browsing History

- Structure
* BrowseHistory
push, pop, createIterator
* Iterator (interface)
next, current, isDone
* ListIterator, ArrayIterator
Created inside BrowseHistory
* Relationship
Depend(BrowseHistory, Iterator)
Inheritance(ListIterator, Iterator)

--------------------------------------
Section 6 - Strategy Pattern

- Storing Images with compression and filter

- Structure
* ImageStorage (Context)
compressor, filter
store()
* Compressor, Filter (interface) (Strategy)
compress(), apply()
* JpegComp, PngComp, B&WFil, HighContFil (ConcreteStrategyA,B)
compress(), apply()
* Relationship
Compose(ImageStorage, [Compressor, Filter])
Inheritance([JpegComp, PngComp], Compressor)
Inheritance([B&WFil, HighContFil], Filter)

- Doing same thing differently
- Strategy vs state pattern
Similarity : Change behaviour of an object.
Difference : 
State - object can have single state, behaviour are represented by
subclass of Tool interface. Encapsulates state dependent behaviour.
Strategy - object has more than 1 state, different behaviour are
represented using different strategy objects. Encapsulates an algorithm.

--------------------------------------
Section 7 - Template method Pattern

- Logging each task in banking

- Structure
* Task (AbstractClass)
execute (templateMethod)
doExecute (primitiveOperation) <Hooks>
* TransferMoney, GenerateReport (ConcreteClass)
doExecute (primitiveOperation)
* Relationship
Inheritance(TransferMoney, Task)

--------------------------------------
Section 8 - Command Pattern

- Structure
* Button (Invoker)
* Command
Interface
execute()
* AddCustomer (ConcreteCommand)
AddCustomer(service)
execute() -> service.add_customer()
* CustomerService (Receiver)
* Relationship
Compose(Button, Command)
Inheritance(AddCustomer, Commmand)
Dependency(CustomerService, Command)

- Using
* service = CustomerService()
* command = AddCustomerCommand(service)
* button = Button(command)

- Composite commands
* Create class CompositeCommand(Command)
* field : commandsList
* method : add(command), execute() : executes all commands

- Undoable commands
* Create interface UndoableCommand(Command)
method : unexecute()
* Vs-Memento
Memento : Store snapshots in state
Undoable cmd : Store changes in state
* Create class History
field - List[UndoableCommand]
method - push, pop, size
* Create class BoldCommand(UndoableCommand)
field - prevContent, document, history
execute() :
prevContent = doc.content, doc.makeBold(), history.push
unexecute() - doc.setContent(prevContent) 
* Create class UndoCommand(Command)
field - history
execute() - history.pop().unexecute()
* Using
history = History()
document = HtmlDocument()
document.set_content("Hello World")
BoldCommand(document, history).execute()
UndoCommand(history).execute()

--------------------------------------
Section 9 - Observer Pattern

- In spreadsheet, change chart on value change

- Structure
* Subject
observersList
addObserver (attach)
removeObserver (detach)
notfiyObservers (notify)
* DataSource (ConcreteSubject)
value, getValue, setValue
* Observer (interface)
update()
* Spreadsheet/Chart (ConcreteObserver)
update()

- Relationship
Compose(Subject, Observer)
Inheritance(DataSource, Subject)
Inheritance(Spreadsheet, Observer)

- Communication styles
* Push
Observer.update(value)
ConcreteObserver independent of ConcreteSubject
* Pull
Compose(Spreadsheet, DataSource)
new Spreadsheet(dataSourceObj)
dataSourceObj.getValue()

--------------------------------------
Section 10 - Mediator Pattern

- Syncing input fields in a form

- Structure
* Dialog (abstract) (Mediator)
changed(control)
* ArticlesDialogBox (ConcreteMediator)
changed(control)
* UIControl (interface) (Colleague)
* TextBox, ListBox, Button (ConcreteColleague)
owner: Dialog

- Relationship
* Inheritance(ArticlesDialogBox, DialogBox)
* Inheritance(TextBox, UIControl)
* Depend(UIControl, DialogBox)
* Depend(ArticlesDialogBox, TextBox)

- Using
*  dialog = ArticlesDialogBox()
* In simulateUserInteraction
this.articles_list_box.set_selection("Article 1")
this.title_text_box.set_content("")
this.title_text_box.set_content("Article 2")
print("Textbox : " + this.title_text_box.get_content())
print("Button : " + str(this.save_button.is_enabled()))

- Through Observer pattern
* Structure
> UIControl (Subject)
observersList
addObserver (attach)
removeObserver (detach)
notfiyObservers (notify)
> TextBox, Button (ConcreteSubject)
value, getValue, setValue
> Observer (interface)
update()
> ArticlesDialogBox (ConcreteObserver)
update()
* Using
> In ArticlesDialogBox constructor
self.articles_list_box = TextBox()
self.articles_list_box.attach(type('NewObserver', (object,), dict(update=self.__article_selected)))

--------------------------------------
Section 11 - Chain of Responsibility Pattern

- Processing Http request

- Structure
* WebServer (Sender)
handle(request) { handler.handle(request) }
* Handler (abstract)
> next: Handler
> handle() :-
if self.do_handle(request): return
if self.__next:self.__next.handle(request)
> doHandle()
* Authenticator, Compressor, Logger (ConcreteHandler)
doHandle()

- Relationship
Inheritance(Logger, Handler)
Compose(WebServer, Handler)

- Using
* Create handlers as : 
newHandler = Handler1(oldHandler/null)
* Run as : WebServer(lastHandler).handle(request)

--------------------------------------
Section 12 - Visitor Pattern

- Syntax highlighting by editor
- Only : object structure is stable, operation added frequently

- Structure
* HtmlDocument 
nodesList, add(node), 
execute(operation) : for all nodes
* HtmlNode (interface) (Element)
execute(operation) : accept(visitor)
* HeadingNode, AnchorNode (ConcreteElement)
execute(operation) : operation.apply(this)
accept(visitor) : visitor.visit(this)
* Operation (interface) (Visitor)
apply(heading) : visit(ConcreteElementA)
apply(anchor) : visit(ConcreteElementB)
* HighlightOperation, PlainTextOperation (ConcreteVisitor)
apply(heading)
apply(anchor)

- Relationship
* Compose(HtmlDocument, HtmlNode)
* Inheritance(HeadingNode, HtmlNode)
* Inheritance(HighlightOperation, Operation)
* Depend(HtmlNode, Operation)
* Depend(HtmlDocument, Operation)

- Using
* Create HtmlDocument()
* Add nodes : doc.add(new Node)
* Use operations : doc.execute(new OperationA())

--------------------------------------
Status - Section 12 completed
