
- What are Design Patterns
* Elegant solution to repeating problems

- Categories
* Creational, Structural, Behavioural

--------------------------------------
Section 2 : Essentials

- Coupling
* Dependency on another class
* Consumer class also recompiled on change.

- Interfaces
* Contract - class capabilities

- Encapsulation
* Restrict state/data changes externally directly.
* Provide getters/setters.

- Abstraction
* Hide details
* Using private

- Inheritance

- Polymorphism
* Object's ability to morph
* Using abstract method and class

- UML
* Unified Modeling Lang
* -/+ = private/public
* Method <-/+> <name>([args,..])[:<returnType>]
* Field <-/+> <name>:type
* Relationship
Inheritance, Composition, 
Dependency (parameter/local var)

--------------------------------------
Section 3 : Memento Pattern

- Undo Mechanism implement

- Structure
* Editor (Originator)
createState
restore(state)
* EditorState (Memento)
* History (Caretaker)
List of EditorState
push(state), pop
* Relationship
Depend(Editor, EditorState)
Compose(History, EditorState)

--------------------------------------
Section 4 : State Pattern

- Tool based canvas state

- Structure
* Canvas (Context)
currentTool
action() (request)
* Tool (Abstract) (State)
action() (handle)
* Tool1, Tool2 (ConcreteStateA,B)
action() (handle)
* Relationship
Compose(Canvas, Tool)
Inheritance(Tool1, Tool)

- Open Closed Principle

- Makes Extensible

--------------------------------------
Status - Section 2 Vid 10 completed
