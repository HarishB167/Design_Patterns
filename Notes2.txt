Structural Patterns

--------------------------------------
Section 1 - Composite Pattern

- Object hierarchies : Files and folders
Treating all objects in same way.

- Structure
* Component (interface) ()
render() (operation)
* Shape (Leaf)
render() (operation)
* Group (Composite)
list: Component
render() (operation)
add(component)

- Relationship
* Inheritance(Shape, Component)
* Inheritance(Group, Component)
* Compose(Group, Component)

- Using
group1 = Group()
group1.add(Shape())
group2 = Group()
group2.add(Shape())
group = Group()
group.add(group1)
group.add(group2)
group.render()

--------------------------------------
Section 2 - Adapter Pattern

- Convert interface of a class to different form. 
Like a Hdmi to VGA converter

- Structure
* ImageView (Client)
apply(filter)
* Filter (interface) (Target)
apply(image) (operation)
* CaramelFilter (Adapter)
apply(image) (operation)
* Caramel (Adaptee)
render() (otherOperation)

- Relationship
* Compose(CaramelFilter, Caramel)
* Inheritance(CaramelFilter, Filter)
* Depend(ImageView, Filter)

- Using
* Create Image view
image_view = ImageView(Image())
* Apply CaramelFilter with Caramel as argument
image_view.apply(CaramelFilter(Caramel()))

--------------------------------------
Status - Section 2 completed
