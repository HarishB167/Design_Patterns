Structural Patterns

--------------------------------------
Section 1 - Composite Pattern

- Object hierarchies : Files and folders
Treating all objects in same way.

- Structure
* Component (interface) ()
render() (operation)
* Shape (Leaf)
render() (operation)
* Group (Composite)
list: Component
render() (operation)
add(component)

- Relationship
* Inheritance(Shape, Component)
* Inheritance(Group, Component)
* Compose(Group, Component)

- Using
group1 = Group()
group1.add(Shape())
group2 = Group()
group2.add(Shape())
group = Group()
group.add(group1)
group.add(group2)
group.render()

--------------------------------------
Section 2 - Adapter Pattern

- Convert interface of a class to different form. 
Like a Hdmi to VGA converter

- Structure
* ImageView (Client)
apply(filter)
* Filter (interface) (Target)
apply(image) (operation)
* CaramelFilter (Adapter)
apply(image) (operation)
* Caramel (Adaptee)
render() (otherOperation)

- Relationship
* Compose(CaramelFilter, Caramel)
* Inheritance(CaramelFilter, Filter)
* Depend(ImageView, Filter)

- Using
* Create Image view
image_view = ImageView(Image())
* Apply CaramelFilter with Caramel as argument
image_view.apply(CaramelFilter(Caramel()))

--------------------------------------
Section 3 - Decorator Pattern

- Adds additional behaviour to object dynamically.
Storing data with optionally encryption, compression etc.

- Structure
* Stream (interface) (Component)
write() (operation)
* CloudStream (ConcreteComponent)
write() (operation)
* Encrypted (Decorator)
field - stream
write() (operation) :- 
Additional behaviour
stream.write()

- Relationship
* Inheritance(CloudStream, Stream)
* Inheritance(Encrypted, Stream)
* Depend(Encrypted, Stream)

- Vs Adapter
* In Adaptor : change interface of a class to a different form
* In Decorator : add additional behaviour to an object

- Using
store_credit_card(
    EncryptedCloudStream(
        CompressedCloudStream(
            CloudStream())))

--------------------------------------
Section 4 - Facade Pattern

- Provide simple interface for complex system.
Using NotificationService to send notifications, instead of connecting,
authorizing, sending, disconnecting manually.

- Structure
* Main (Client)
* NotificationService (Facade)

- Relationship
* Depend(Main, NotificationService)
* Depend(NotificationService, NotificationServer)
* Depend(NotificationService, Message)

- Using
* In NotificationService, take simple message and use all
classes to send message
* In main use NotificationService's send method

--------------------------------------
Section 5 - Flyweight Pattern

- Large number of objects taking significant amount of memeory,
and reducing amount of memeory by objects. 
Every point in google map having its copy of icon.
Referencing PointIcon in all Point in google map

- Structure
* Point (Client)
x,y
* PointIcon (Flyweight)
type, icon [both are shared states]
* PointIconFactory (Flyweight Factory)
Map<PointType, PointIcon>
getPointIcon(type):PointIcon
* PointService (Client)
getPoints()

- Relationship
* Compose(Point, PointIcon)
* Compose(PointIconFactory, PointIcon)
* Depend(PointService, PointIconFactory)

- Using
PointService(PointIconFactor())
for point in service.getPoints(): point.draw()

--------------------------------------
Status - Section 5 completed
